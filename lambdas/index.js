"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const trips_1 = require("./trips");
exports.handler = async (event) => {
    console.log('querystring: ', event.queryStringParameters);
    const queryString = event.queryStringParameters;
    const method = event.requestContext.http.method;
    const account_id = queryString.account_id;
    const id = queryString.id;
    const body = event.body;
    console.log('method is ', method);
    return tripOperation(method, account_id, id, body);
};
async function tripOperation(method, aid, id, body = {}) {
    try {
        if (method === 'POST') {
            const trip = trips_1.Trip.newInstance(body);
            await trip.save();
            return { statusCode: 200, body: trip };
        }
        const res = await trips_1.Trip.query(aid, id);
        const trips = trips_1.mapToTrips(res.Items);
        const trip = trips[0];
        switch (method) {
            case 'GET':
                return { statusCode: 200, body: trips };
            case 'PUT':
                Object.keys(body).forEach((key) => {
                    trip[key] = body[key];
                });
                trip.save();
                return { statusCode: 200, body: trip };
            case 'DELETE':
                trip.delete();
                return { statusCode: 200, body: trip };
            default:
                return { statusCode: 500, body: `Unsupported method: ${method}` };
        }
    }
    catch (e) {
        throw e;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBMkM7QUFFOUIsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBZ0IsRUFBRTtJQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUMxRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUM7SUFDaEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2hELE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDMUMsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUMxQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sYUFBYSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXJELENBQUMsQ0FBQztBQUVGLEtBQUssVUFBVSxhQUFhLENBQUMsTUFBYyxFQUFFLEdBQVcsRUFBRSxFQUFXLEVBQUUsSUFBSSxHQUFHLEVBQUU7SUFDOUUsSUFBSTtRQUNGLElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUNyQixNQUFNLElBQUksR0FBRyxZQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUN4QztRQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sWUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsTUFBTSxLQUFLLEdBQVcsa0JBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTVCLFFBQU8sTUFBTSxFQUFFO1lBQ2IsS0FBSyxLQUFLO2dCQUNSLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUMxQyxLQUFLLEtBQUs7Z0JBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUN6QyxLQUFLLFFBQVE7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNkLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUN6QztnQkFDRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLE1BQU0sRUFBRSxFQUFDLENBQUE7U0FDbkU7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUVILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBUb1RyaXBzLCBUcmlwIH0gZnJvbSAnLi90cmlwcyc7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudCk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgY29uc29sZS5sb2coJ3F1ZXJ5c3RyaW5nOiAnLCBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMpO1xyXG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzO1xyXG4gIGNvbnN0IG1ldGhvZCA9IGV2ZW50LnJlcXVlc3RDb250ZXh0Lmh0dHAubWV0aG9kO1xyXG4gIGNvbnN0IGFjY291bnRfaWQgPSBxdWVyeVN0cmluZy5hY2NvdW50X2lkO1xyXG4gIGNvbnN0IGlkID0gcXVlcnlTdHJpbmcuaWQ7XHJcbiAgY29uc3QgYm9keSA9IGV2ZW50LmJvZHk7XHJcbiAgY29uc29sZS5sb2coJ21ldGhvZCBpcyAnLCBtZXRob2QpO1xyXG4gIHJldHVybiB0cmlwT3BlcmF0aW9uKG1ldGhvZCwgYWNjb3VudF9pZCwgaWQsIGJvZHkpO1xyXG5cclxufTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHRyaXBPcGVyYXRpb24obWV0aG9kOiBzdHJpbmcsIGFpZDogc3RyaW5nLCBpZD86IHN0cmluZywgYm9keSA9IHt9KSB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChtZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgICBjb25zdCB0cmlwID0gVHJpcC5uZXdJbnN0YW5jZShib2R5KTtcclxuICAgICAgYXdhaXQgdHJpcC5zYXZlKCk7XHJcbiAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMCwgYm9keTogdHJpcCB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgVHJpcC5xdWVyeShhaWQsIGlkKTtcclxuICAgIGNvbnN0IHRyaXBzOiBUcmlwW10gPSBtYXBUb1RyaXBzKHJlcy5JdGVtcyk7XHJcbiAgICBjb25zdCB0cmlwOiBUcmlwID0gdHJpcHNbMF07XHJcblxyXG4gICAgc3dpdGNoKG1ldGhvZCkge1xyXG4gICAgICBjYXNlICdHRVQnOiBcclxuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGJvZHk6IHRyaXBzIH07XHJcbiAgICAgIGNhc2UgJ1BVVCc6XHJcbiAgICAgICAgT2JqZWN0LmtleXMoYm9keSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICB0cmlwW2tleV0gPSBib2R5W2tleV07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdHJpcC5zYXZlKCk7XHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBib2R5OiB0cmlwIH07XHJcbiAgICAgIGNhc2UgJ0RFTEVURSc6XHJcbiAgICAgICAgdHJpcC5kZWxldGUoKTtcclxuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGJvZHk6IHRyaXAgfTtcclxuICAgICAgZGVmYXVsdDogXHJcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNTAwLCBib2R5OiBgVW5zdXBwb3J0ZWQgbWV0aG9kOiAke21ldGhvZH1gfVxyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHRocm93IGU7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuIl19